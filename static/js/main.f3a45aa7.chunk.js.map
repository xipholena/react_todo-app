{"version":3,"sources":["components/TodoItem/TodoItem.jsx","components/TodoList/TodoList.jsx","components/TodoApp/TodoApp.jsx","components/TodosFilter/TodosFilter.jsx","App.js","index.js"],"names":["TodoItem","todo","completed","id","getCheckedTodoId","destroyHandler","useState","status","setStatus","className","classNames","type","onClick","TodoList","items","map","item","key","TodoApp","todos","setTodos","setTodo","checkboxActive","setcheckboxState","countUnfinishedTodo","unfinishedTodos","filter","length","preparedTodo","Date","amountOfCompletedTodos","onSubmit","e","preventDefault","currentState","placeholder","value","onChange","target","active","changedTodos","htmlFor","chosenId","chosenTodo","find","every","href","visible","TodosFilter","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f3a45aa7.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nexport const TodoItem = ({ todo, completed, id, getCheckedTodoId, destroyHandler }) => {\n  const [status, setStatus] = useState(false);\n\n // console.log('TodoItem:', todo, 'status:', status, 'todo.completed:', completed);\n  const checkHandler = (e) => {\n    setStatus(!status);\n  };\n\n  return (\n    <li\n      className={classNames('', { completed: completed === true })}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          onClick={() => {\n            getCheckedTodoId(id);\n            checkHandler();\n          }}\n        />\n        <label className={classNames('', { completed: completed === true })}>\n          {todo}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => destroyHandler(id)}\n        />\n      </div>\n      <input type=\"text\" className=\"edit\" />\n    </li>\n  );\n};\n","import React from 'react';\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList = ({ items, getCheckedTodoId, destroyHandler }) => {\n  //console.log('TodoList');\n\n  return (\n    <>\n      <ul className=\"todo-list\">\n        <li>\n          <div className=\"view\">\n            <input type=\"checkbox\" className=\"toggle\" />\n            <label>asdfghj</label>\n            <button type=\"button\" className=\"destroy\" />\n          </div>\n          <input type=\"text\" className=\"edit\" />\n        </li>\n\n        <li className=\"completed\">\n          <div className=\"view\">\n            <input type=\"checkbox\" className=\"toggle\" />\n            <label>qwertyuio</label>\n            <button type=\"button\" className=\"destroy\" />\n          </div>\n          <input type=\"text\" className=\"edit\" />\n        </li>\n\n        <li className=\"editing\">\n          <div className=\"view\">\n            <input type=\"checkbox\" className=\"toggle\" />\n            <label>zxcvbnm</label>\n            <button type=\"button\" className=\"destroy\" />\n          </div>\n          <input type=\"text\" className=\"edit\" />\n        </li>\n\n        <li>\n          <div className=\"view\">\n            <input type=\"checkbox\" className=\"toggle\" />\n            <label>1234567890</label>\n            <button type=\"button\" className=\"destroy\" />\n          </div>\n          <input type=\"text\" className=\"edit\" />\n        </li>\n      </ul>\n\n      <ul className=\"todo-list\">\n        {items.map(item => (\n          <TodoItem\n            key={item.id}\n            todo={item.todo}\n            completed={item.completed}\n            id={item.id}\n            getCheckedTodoId={getCheckedTodoId}\n            destroyHandler={destroyHandler}\n          />\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React, { useState} from 'react';\nimport classNames from 'classnames';\nimport { TodoList } from '../TodoList';\n\nexport const TodoApp = () => {\n  const [todos, setTodos] = useState([]);\n  const [todo, setTodo] = useState('');\n  const [checkboxActive, setcheckboxState] = useState(false);\n  const [unfinishedTodo, countUnfinishedTodo] = useState(0);\n \n  const unfinishedTodos = todos.filter(todo => !todo.completed).length;\n\n  const getCheckedTodoId = (chosenId) => {\n    const chosenTodo = todos.find(todo => todo.id === chosenId);\n    chosenTodo.completed = !chosenTodo.completed;\n\n    //Костыль? Стейт, который не рендерится, нужен только для перерендера\n    countUnfinishedTodo(todos.filter(todo => !todo.completed).length);\n\n    if (todos.every(todo => todo.completed)) {\n      setcheckboxState(true);\n    } else {\n      setcheckboxState(false);\n    }\n\n  };\n\n  const changeHandler = (e) => {\n    setTodo(e.target.value);\n  };\n\n  const preparedTodo = {\n    todo,\n    completed: false,\n    id: +(new Date()),\n  };\n  const submitHandler = (e) => {\n    e.preventDefault();\n    setTodos(currentState => ([\n      ...currentState,\n      preparedTodo,\n    ]));\n    clearInput();\n  };\n\n  function clearInput() {\n    setTodo('');\n  };\n\n  const toggleTodosStatus = () => {\n    if (!checkboxActive) {\n      const changedTodos = todos.map(todo => ({\n        ...todo,\n        completed: true,\n      }));\n      setTodos(changedTodos);\n      setcheckboxState(true);\n    } else if (checkboxActive) {\n      const changedTodos = todos.map(todo => ({\n        ...todo,\n        completed: false,\n      }));\n      setTodos(changedTodos);\n      setcheckboxState(false);\n    };\n  };\n\n  const destroyHandler = (id) => {\n    setTodos(todos => todos.filter(todo => todo.id !== id));\n  };\n\n  const clearCompleted = () => {//item, app\n    setTodos(todos => todos.filter(todo => !todo.completed));\n  };\n\n  const amountOfCompletedTodos =  todos.filter(todo => !todo.completed).length;\n \n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <h2>\n          Uncompleted todos = {unfinishedTodos}\n        </h2>\n        <form\n          onSubmit={submitHandler}\n        >\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={todo}\n            onChange={changeHandler}\n          />\n        </form>\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className={classNames('toggle-all', { active: checkboxActive === true })}\n          onClick={toggleTodosStatus}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        <TodoList\n          items={todos}\n          getCheckedTodoId={getCheckedTodoId}\n          destroyHandler={destroyHandler}\n        />\n\n      </section>\n\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          3 items left\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <a href=\"#/\" className=\"selected\">All</a>\n          </li>\n\n          <li>\n            <a href=\"#/active\">Active</a>\n          </li>\n\n          <li>\n            <a href=\"#/completed\">Completed</a>\n          </li>\n        </ul>\n\n        <button\n          type=\"button\"\n          className={classNames('clear-completed', { visible: amountOfCompletedTodos > 0 })}\n          onClick={clearCompleted}\n        >\n          Clear completed\n        </button>\n      </footer>\n\n    </section>\n  );\n};\n\n\n","import React from 'react';\n\nexport const TodosFilter = () => {\n  const filter = {\n    all: 'all',\n    active: 'active',\n    completed: 'completed',\n  };\n\n  return (\n    <></>\n  );\n};\n","import React from 'react';\nimport { TodoApp } from './components/TodoApp';\nimport { TodosFilter } from './components/TodosFilter';\n\nfunction App() {\n  return (\n    <>\n      <TodoApp />\n      <TodosFilter />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}